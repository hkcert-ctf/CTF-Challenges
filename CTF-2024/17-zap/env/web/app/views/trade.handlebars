<div class="container">
    <div class="row text-end">
        <h6 class="col-12 display-6" style="font-family: 'Salsa', cursive;">
            Balance: <span id="balance"></span>
        </h6>
    </div>
    <div class="row py-1">
        <div class="col-8 px-1 py-1">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Deposit</h5>
                    <p class="card-text">
                        <b>Deposit instructions:</b>
                    <ol>
                        <li>Send the transaction to <code>{{ serviceAccount }}</code> on mainnet.</li>
                        <li>Use <code id="deposit_nonce"></code> as the message.</li>
                        <li>Send the transaction hash after 12 block confirmations.</li>
                    </ol>

                    <b>Important note:</b> We will only accept transactions that valued at least 1 ETH.

                    <div class="input-group mb-3 mt-2">
                        <input type="text" class="form-control" placeholder="Transaction hash of the deposit" id="deposit-tx-hash"
                            pattern="0x[0-9a-fA-F]{64}">
                    </div>
                    </p>
                    <p class="text-center">
                        <button class="btn btn-primary"
                            onclick="deposit('0xd46382a359393ed77640aa81126f37d818b344f899218fa2d118e8e369ecadf6')">
                            <img src="/static/images/ethereum.svg" width="16" height="16">
                            Deposit
                        </button>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-4 px-1">
            <div class="container">
                <div class="row">
                    <div class="col-12 px-0 py-1">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Withdraw</h5>
                                <p class="card-text">
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" placeholder="Amount to withdraw"
                                        id="withdraw-amount">
                                    <span class="input-group-text">ETH</span>
                                </div>
                                </p>
                                <p class="text-center">
                                    <button class="btn btn-primary" onclick="withdraw()">
                                        <img src="/static/images/metamask-fox.svg" width="16" height="16">
                                        Withdraw
                                    </button>
                                </p>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 px-0 py-1">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Transfer</h5>
                                <p class="card-text">
                                <div class="input-group mb-1">
                                    <input type="text" class="form-control" placeholder="Account to transfer"
                                        id="transfer-account" pattern="0x[0-9a-fA-F]{40}">
                                </div>
                                <div class="input-group mb-3">
                                    <input type="number" class="form-control" placeholder="Amount to transfer"
                                        id="transfer-amount">
                                    <span class="input-group-text">ETH</span>
                                </div>
                                </p>
                                <p class="text-center">
                                    <button class="btn btn-primary"
                                        onclick="transfer('0x0403ed6a27ab9ec4fee579ad88e58facdcbad991', '0.1337')">
                                        <img src="/static/images/metamask-fox.svg" width="16" height="16">
                                        Transfer
                                    </button>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row py-1">
        <div class="col-12 px-1">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Recent Transactions</h5>
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">From</th>
                                <th scope="col">To</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Time</th>
                            </tr>
                        </thead>
                        <tbody id="transaction-list"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="response-modal" tabindex="-1" aria-labelledby="response-modal-label" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <div class="text-center">
                    <img id="response-modal-logo" height="150" width="150">
                </div>
                <h5 class="text-center" id="response-modal-title"></h5>
                <div id="response-modal-message"></div>
            </div>
        </div>
    </div>
</div>

<script>
    async function showModal(response) {
        const json = await response.json()

        const responseModalDom = document.getElementById('response-modal')
        const responseModal = new bootstrap.Modal(responseModalDom)

        if (response.status === 200) {
            document.getElementById('response-modal-logo').setAttribute('src', '/static/images/success.svg')
            document.getElementById('response-modal-title').innerText = 'Success!'
            document.getElementById('response-modal-message').innerText = json.message
        } else {
            document.getElementById('response-modal-logo').setAttribute('src', '/static/images/failure.svg')
            document.getElementById('response-modal-title').innerText = 'Failure...'
            document.getElementById('response-modal-message').innerText = json.error
        }
        responseModal.show()
    }

    async function load() {
        dayjs.extend(dayjs_plugin_relativeTime);
        const getMeResponse = await fetch('/api/me', {
            method: 'GET',
        })
        const { account, deposit_nonce: depositNonce, transaction_nonce: transactionNonce, balance, transactions } = await getMeResponse.json()

        window.account = account
        window.transactionNonce = transactionNonce

        // Populate the deposit nonce and the balance
        document.getElementById('deposit_nonce').innerText = depositNonce
        document.getElementById('balance').innerText = `${(balance / 10 ** 18).toFixed(5)} ETH`

        // Populate the transaction list
        const transactionListDom = document.getElementById('transaction-list')
        while (transactionListDom.firstChild) {
            transactionListDom.removeChild(transactionListDom.firstChild);
        }

        transactions.forEach(function ({ from, to, amount, time }) {
            const transactionTemplateDom = document.createElement('template')
            transactionTemplateDom.innerHTML = `<tr><td></td><td></td><td class="text-right"></td><td></td></tr>`

            const transactionDom = transactionTemplateDom.content.children[0]

            transactionDom.querySelector('td:nth-child(1)').innerHTML = `<img class="rounded-circle" width="26" height="26"> <span></span>`
            transactionDom.querySelector('td:nth-child(2)').innerHTML = `<img class="rounded-circle" width="26" height="26"> <span></span>`
            transactionDom.querySelector('td:nth-child(3)').innerText = `${(amount / 10 ** 18).toFixed(5)} ETH`
            transactionDom.querySelector('td:nth-child(4)').innerText = dayjs(time).fromNow()

            transactionDom.querySelector('td:nth-child(1) > img').src = `https://effigy.im/a/${from}.svg`
            transactionDom.querySelector('td:nth-child(1) > span').innerText = from
            transactionDom.querySelector('td:nth-child(2) > img').src = `https://effigy.im/a/${to}.svg`
            transactionDom.querySelector('td:nth-child(2) > span').innerText = to

            transactionListDom.appendChild(transactionDom)
        })
    }

    async function sign(message) {
        if (!window.ethereum) {
            alert('go install metamask')
            return
        }

        const accounts = await window.ethereum.request({
            "method": "eth_requestAccounts",
            "params": []
        })
        const account = accounts[0]

        const signature = await window.ethereum.request({
            "method": "personal_sign",
            "params": [message, account]
        })

        return signature
    }

    async function transfer() {
        const toAccount = document.getElementById('transfer-account').value.toLowerCase()
        const accountRegex = new RegExp(`0x[0-9a-f]{40}`)

        const amount = document.getElementById('transfer-amount').value
        const regex = new RegExp('[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)')
        if (!regex.test(amount)) {
            const responseModalDom = document.getElementById('response-modal')
            const responseModal = new bootstrap.Modal(responseModalDom)
            document.getElementById('response-modal-logo').setAttribute('src', '/static/images/failure.svg')
            document.getElementById('response-modal-title').innerText = 'Failure...'
            document.getElementById('response-modal-message').innerText = 'Amount should be a floating number.'
            responseModal.show()
            return
        }

        const signature = await sign(`I am ${account} and I am transferring ${amount} ETH to ${toAccount} (nonce: ${transactionNonce})`)

        const transferResponse = await fetch('/api/transfer', {
            body: JSON.stringify({ to_account: toAccount, amount, signature }),
            method: 'POST',
            headers: {
                'content-type': 'application/json'
            }
        })
        showModal(transferResponse)
        load()
    }

    async function withdraw() {
        const amount = document.getElementById('withdraw-amount').value
        const regex = new RegExp('[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)')
        if (!regex.test(amount)) {
            const responseModalDom = document.getElementById('response-modal')
            const responseModal = new bootstrap.Modal(responseModalDom)
            document.getElementById('response-modal-logo').setAttribute('src', '/static/images/failure.svg')
            document.getElementById('response-modal-title').innerText = 'Failure...'
            document.getElementById('response-modal-message').innerText = 'Amount should be a floating number.'
            responseModal.show()
            return
        }
        const signature = await sign(`I am ${account} and I am withdrawing ${amount} ETH (nonce: ${transactionNonce})`)

        const withdrawResponse = await fetch('/api/withdraw', {
            body: JSON.stringify({ amount, signature }),
            method: 'POST',
            headers: {
                'content-type': 'application/json'
            }
        })
        showModal(withdrawResponse)
        load()
    }

    async function deposit() {
        const transactionId = document.getElementById('deposit-tx-hash').value.toLowerCase()
        const depositResponse = await fetch('/api/deposit', {
            body: JSON.stringify({ transaction_id: transactionId }),
            method: 'POST',
            headers: {
                'content-type': 'application/json'
            }
        })
        showModal(depositResponse)
        load()
    }
</script>